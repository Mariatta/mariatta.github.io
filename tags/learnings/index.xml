<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Learnings on Mariatta</title><link>https://mariatta.ca/tags/learnings/</link><description>Recent content in Learnings on Mariatta</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 03 Oct 2025 11:50:00 -0800</lastBuildDate><atom:link href="https://mariatta.ca/tags/learnings/index.xml" rel="self" type="application/rss+xml"/><item><title>Disabling Signup in Django allauth</title><link>https://mariatta.ca/posts/disabling-signup-django-allauth/</link><pubDate>Fri, 03 Oct 2025 11:50:00 -0800</pubDate><guid>https://mariatta.ca/posts/disabling-signup-django-allauth/</guid><description>&lt;h2 id="django-allauth"&gt;Django allauth&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://allauth.org/" target="_blank" rel="noopener"&gt;Django allauth&lt;/a&gt; is a popular third party package that provides a lot of functionality for handling user authentication,
with support for social authentication, email verification, multi-factor authentication, and more.&lt;/p&gt;
&lt;p&gt;It is a powerful library that greatly expands the built-in Django authentication system. It comes with its own basic
forms and models for user registration, login, logout, and password management.&lt;/p&gt;
&lt;p&gt;I like using it because often I just wanted to get a new Django project up and running quickly without having to write
up all the authentication-related views, forms, and templates myself. I&amp;rsquo;m using &lt;code&gt;django-allauth&lt;/code&gt; in &lt;a href="https://portal.pyladies.com" target="_blank" rel="noopener"&gt;PyLadiesCon
Portal&lt;/a&gt;, and in my personal project &lt;a href="https://secretcodes.dev" target="_blank" rel="noopener"&gt;Secret Codes&lt;/a&gt;.&lt;/p&gt;</description></item><item><title>Generating (and Sending) Conference Certificates Using Python</title><link>https://mariatta.ca/posts/create-send-certificates-with-python/</link><pubDate>Thu, 12 Dec 2024 00:00:00 -0800</pubDate><guid>https://mariatta.ca/posts/create-send-certificates-with-python/</guid><description>&lt;h2 id="pyladiescon-certificate-of-attendance"&gt;PyLadiesCon Certificate of Attendance&lt;/h2&gt;
&lt;p&gt;Not sure how common is this practice of giving out certificates to conference attendees. I&amp;rsquo;ve been attending mostly Python-related conferences in North America,
and we don&amp;rsquo;t usually get any certificates here.
However, when I went to Python Brasil in Manaus 2022, they gave me a certificate of attendance.
And as a conference organizer, occasionally I&amp;rsquo;d receive request from a few attendees and volunteers about such certificate, saying that
their employer or school requires it as proof of attendance.&lt;/p&gt;</description></item><item><title>Extending the Django OAuth Toolkit Application Model Mid-project</title><link>https://mariatta.ca/posts/extending-dj-oauth-toolkit-model/</link><pubDate>Fri, 30 Aug 2024 00:00:00 -0800</pubDate><guid>https://mariatta.ca/posts/extending-dj-oauth-toolkit-model/</guid><description>&lt;h2 id="django-oauth-toolkit"&gt;Django Oauth Toolkit&lt;/h2&gt;
&lt;p&gt;The &lt;a href="https://django-oauth-toolkit.readthedocs.io/en/latest/index.html" target="_blank" rel="noopener"&gt;Django Oauth Toolkit&lt;/a&gt; is a powerful library for
adding OAuth2 functionalities out of the box for your Django app.
The library comes with pre-defined models, views, urls, and templates for managing OAuth2 authorization and flow.&lt;/p&gt;
&lt;h2 id="the-application-model"&gt;The Application Model&lt;/h2&gt;
&lt;p&gt;Django OAuth Toolkit provides a basic model for the OAuth2 Application, this is a model that represents a Client on
the Authorization server. It has fields like &lt;code&gt;client_id&lt;/code&gt;, &lt;code&gt;user&lt;/code&gt;, &lt;code&gt;redirect_uris&lt;/code&gt;, &lt;code&gt;client_secret&lt;/code&gt;, etc.&lt;/p&gt;</description></item></channel></rss>